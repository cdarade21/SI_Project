const fetch = require("node-fetch");
const express = require('express');
const bodyparser=require('body-parser');
const app = express();
const config = require('config');
const PORT = 3000;
const cors= require('cors');
const swaggerJsdoc= require('swagger-jsdoc');
const swaggerUi= require('swagger-ui-express');

const options = {
    swaggerDefinition: {
      info: {
        title: "QnA Bot",
        version: "1.0.0",
        description: "QnA Bot API autogenerated by Swagger. \r\n\n QnA Maker is a cloud-based API service that lets you create a conversational question-and-answer layer over your existing data. It is used to find the most appropriate answer for any input from your custom knowledge base (KB) of information.",
      },
      host: "localhost:3000",
      basePath: "/",
    },
    apis: ["./index.js"],
  };

const specs = swaggerJsdoc(options);
app.use(cors());
app.use("/docs", swaggerUi.serve, swaggerUi.setup(specs));
app.use(bodyparser.json());

/**
 * @swagger
 * definitions:
 *   Bot:
 *     properties:
 *       question:
 *         type: string
 */
/**
/**
 * @swagger
 * /getanswer:
 *    post:
 *      description: Call to GenerateAnswer API using POST method which answer to user questions
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Question is answered by the bot
 *          400:
 *              description: Bad request (Question in Invalid format or Empty question)
 *          404:
 *              description: No answer found in the knowledgebase
 *          500:
 *              description: Server error (e.g. Connection loss or server side technical glitch)
 *      parameters:
 *          - name: Question
 *            description: Ask a question to the bot ({"question":"How are you?"})
 *            in: body
 *            required: true
 *      schema:
 *            $ref: '#/definitions/Bot'
 *
 */

app.post("/getanswer", function(req, res, next) {
    if(!req.body.question) {
        res.status(400).send("I can't listen to you. Please ask a question.");
    }
    else {
        let ques = req.body.question;

        fetch(config.get('generateAnswerURI'),{
        
        // Adding method type 
        method: "POST", 
        
        // Adding body or contents to send 
        body: JSON.stringify({ 
            question: ques
        }), 
        
        // Adding headers to the request 
        headers: { 
            "Content-type": "application/json; charset=UTF-8",
            'Ocp-Apim-Subscription-Key': config.get('Subscription-Key')
        } 
    }) 
    
    // Converting to JSON 
    .then(response => response.json()) 
    
    // Sending results in JSON format 
    .then(json => json.answers[0].questions.length!==0 ? res.status(200).send(json.answers[0].answer):res.status(404).send(json.answers[0].answer))
    .catch(error => res.status(500).send('Server Error'))
}
})  

/**
 * @swagger
 * /getmetadata:
 *    get:
 *      description: Call to Get Details API using GET method which gives Metadata of the knowledgebase
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Metadata of the knowledgebase is returned by the server
 *          400:
 *              description: Bad request (Api request URL is invalid i.e. Knowledge base not found or Resource not found)
 *          500:
 *              description: Server error (e.g. Connection loss or server side technical glitch)
 */

app.get("/getmetadata", function(req, res, next) {
    fetch(config.get('generateMetadataURI'),{
    
    // Adding method type 
    method: "GET", 
    
    // Adding headers to the request 
    headers: { 
        "Content-type": "application/json; charset=UTF-8",
        'Ocp-Apim-Subscription-Key': config.get('Subscription-Key')
    } 
}) 

// Converting to JSON 
.then(response => response.json()) 

// Displaying results to console 
.then(json => json.error ? res.status(400).send(json.error.message): res.status(200).send(json))
.catch(error => res.status(500).send('Server Error'))

}) 

/**
 * @swagger
 * /getallkbs:
 *    get:
 *      description: Call to List All API using GET method which gives list of knowledgebases of the user
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: List of knowledgebases returned by the server
 *          400:
 *              description: Bad request (Api request knowledgebase URL is invalid i.e. Knowledge base not found or Resource not found)
 *          500:
 *              description: Server error (e.g. Incorrect host name or Connection loss or server side technical glitch)
 */

app.get("/getallkbs", function(req, res, next) {
    fetch(config.get('listAllURI'),{
    
    // Adding method type 
    method: "GET", 
    
    // Adding headers to the request 
    headers: { 
        "Content-type": "application/json; charset=UTF-8",
        'Ocp-Apim-Subscription-Key': config.get('Subscription-Key')
    } 
}) 

// Converting to JSON 
.then(response => response.json()) 

// Sending results in JSON format 
.then(json => json.error ? res.status(400).send(json.error.message): res.status(200).send(json))
.catch(error => res.status(500).send('Server Error'))
})  

/**
 * @swagger
 * /downloadkb:
 *    get:
 *      description: Call to Knowledgebase Download API using GET method which downloads all questions and answers in the KB. It takes few seconds to minute to download the entire knowledgebase depending on the size of it.
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Knowledgebase downloaded from the server
 *          400:
 *              description: Bad request (Api request knowledgebase URL is invalid i.e. Knowledge base not found or Resource not found)
 *          500:
 *              description: Server error (e.g. Incorrect host name or Connection loss or server side technical glitch)
 */

app.get("/downloadkb", function(req, res, next) {
    fetch(config.get('downloadKBURI'),{
    
    // Adding method type 
    method: "GET", 
    
    // Adding headers to the request 
    headers: { 
        "Content-type": "application/json; charset=UTF-8",
        'Ocp-Apim-Subscription-Key': config.get('Subscription-Key')
    } 
}) 

// Converting to JSON 
.then(response => response.json()) 

// Sending results in JSON format 

.then(json => json.error ? res.status(400).send(json.error.message): res.status(200).send(json))
.catch(error => res.status(500).send('Server Error'))
})

app.listen(PORT, () => console.log(`Server started on port ${PORT}`));